FROM openjdk:8-jdk-alpine

# Installing docker
RUN apk add --update docker openrc
RUN rc-update add docker boot

# Installing tools
RUN apk add --no-cache git git-lfs openssh-client curl unzip bash ttf-dejavu coreutils tini

# Assigning values
ARG python_version=python3.7

# Installing ansible
RUN echo "===> Installing sudo to emulate normal OS behavior..."  && \
    apk --update add sudo                                         && \
    \
    \
    echo "===> Adding ${python_version} runtime..."  && \
    apk --update add ${python_version} py3-pip openssl ca-certificates    && \
    apk --update add --virtual build-dependencies \
                python-dev libffi-dev openssl-dev build-base  && \
    pip3 install --upgrade pip3 cffi                            && \
    \
    \
    echo "===> Installing Ansible..."  && \
    pip3 install ansible                && \
    \
    \
    echo "===> Installing handy tools (not absolutely required)..."  && \
    pip3 install --upgrade pycrypto pywinrm         && \
    apk --update add sshpass openssh-client rsync  && \
    \
    \
    echo "===> Removing package list..."  && \
    apk del build-dependencies            && \
    rm -rf /var/cache/apk/*               && \
    \
    \
    echo "===> Adding hosts for convenience..."  && \
    mkdir -p /etc/ansible                        && \
    echo 'localhost' > /etc/ansible/hosts


# Assigning values
ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ARG http_port=8080
ARG agent_port=50000
ARG JENKINS_HOME=/var/jenkins_home
ARG REF=/usr/share/jenkins/ref

ENV JENKINS_HOME $JENKINS_HOME
ENV JENKINS_SLAVE_AGENT_PORT ${agent_port}
ENV REF $REF

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container,
# ensure you use the same uid
#RUN mkdir -p $JENKINS_HOME \
  #&& chown ${uid}:${gid} $JENKINS_HOME \
  #&& addgroup -g ${gid} ${group} \
  #&& adduser -h "$JENKINS_HOME" -u ${uid} -G ${group} -s /bin/bash -D ${user}

USER root

RUN mkdir -p $JENKINS_HOME \
  && addgroup ${group} \
  && adduser -h "${JENKINS_HOME}" -D ${user} -G ${group} \
  && chown -R ${user}:${group} $JENKINS_HOME/

# Jenkins home directory is a volume, so configuration and build history
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

# $REF (defaults to `/usr/share/jenkins/ref/`) contains all reference configuration we want
# to set on a fresh new installation. Use it to bundle additional plugins
# or config file with your custom jenkins Docker image.
RUN mkdir -p ${REF}/init.groovy.d

# jenkins version being bundled in this docker image
ARG JENKINS_VERSION
ENV JENKINS_VERSION ${JENKINS_VERSION:-2.205}

# jenkins.war checksum, download will be validated using it
#ARG JENKINS_SHA=2d71b8f87c8417f9303a73d52901a59678ee6c0eefcf7325efed6035ff39372a
ARG JENKINS_SHA=41a91e67b174a1c7290d53f4b92a93c78fdc6e1cda160485a3318bc4dfbeeefa

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
  && echo "${JENKINS_SHA}  /usr/share/jenkins/jenkins.war" | sha256sum -c -

ENV JENKINS_UC https://updates.jenkins.io
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
ENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals
RUN chown -R ${user} "$JENKINS_HOME" "$REF"

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}

#RUN chown -R 1000 $JENKINS_HOME/

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

RUN chown ${user}:${group} $JENKINS_HOME/copy_reference_file.log

USER ${user}

COPY jenkins-support /usr/local/bin/jenkins-support
COPY jenkins.sh /usr/local/bin/jenkins.sh
COPY tini-shim.sh /bin/tini
COPY plugins.sh /usr/local/bin/plugins.sh
COPY install-plugins.sh /usr/local/bin/install-plugins.sh

#USER root

#RUN chmod +x /usr/local/bin/jenkins-support \
 #   && chmod +x /usr/local/bin/plugins.sh \
 #   && chmod +x /usr/local/bin/jenkins.sh \
 #   && chmod +x /usr/local/bin/install-plugins.sh 

#USER ${user}

ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/jenkins.sh"]

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup $REF/plugins from a support bundle
#COPY plugins.sh /usr/local/bin/plugins.sh
#COPY install-plugins.sh /usr/local/bin/install-plugins.sh

## To run jenkins
# docker run -u 0 --name jenkins-alpine -d -p 8889:8080 -p 50009:50000 -v /var/run/docker.sock:/var/run/docker.sock -v /home/$(whoami)/vamsee/myjenkins_home:/var/jenkins_home jenkins-doc-ans-alpine1:latest
